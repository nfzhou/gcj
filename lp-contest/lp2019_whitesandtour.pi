% tour.pi
import sat.

main =>
    Fs = $[offer(1,1,1,1),     offer(2,1,3,2),     offer(3,1,1,3),
           offer(1,1,3,1),     price(2,1,3),       offer(3,1,2,1),
           offer(1,1,4,1),     offer(3,1,3,2),
           price(1,1,7),       offer(2,2,1,2),     price(3,1,5),
           offer(2,2,2,1),     
           offer(1,2,2,2),     offer(2,2,3,2),     offer(3,2,2,2),
           offer(1,2,5,1),     offer(2,2,5,2),     offer(3,2,4,2),
           price(1,2,7),       price(2,2,9),       price(3,2,5),
           offer(2,3,4,2),
           price(2,3,4),
           maxacceptedoffer(2),
           need(1,3), need(2,2), need(3,4), need(4,1), need(5,3)],
    whitesand(Fs).

main([File]) =>
    Fs = read_file_terms(File),
    whitesand(Fs).

whitesand(Fs) =>
    Needs = [{A,U} : $need(A,U) in Fs],
    Offers = [{T,O,A,U} : $offer(T,O,A,U) in Fs].sort(),
    Prices = [{T,O,P} : $price(T,O,P) in Fs].sort(),
    member($maxacceptedoffer(K),Fs),
    M = len(Prices),
    Vs = new_list(M),
    Vs :: 0..1,
    foreach ({A,NeededU} in Needs)
        BuyUList = [$(V*U) : {{T,O,_}, V} in zip(Prices,Vs), (member({T,O,A,U},Offers) -> true; U = 0)],
        sum(BuyUList) #>= NeededU
    end,
    constr_count(Prices,Vs,0,0,K),
    TotalPrice #= sum([V*P : {{_,_,P}, V} in zip(Prices,Vs)]),
    solve([$min(TotalPrice)],Vs),
    printf("totalcost(%d).\n",TotalPrice).

constr_count([],_,_,S,K) => S #=< K.
constr_count([{T,_,_}|Prices],[V|Vs],T,S,K) =>
    constr_count(Prices,Vs,T,$(S+V),K).
constr_count([{T,_,_}|Prices],[V|Vs],_T,S,K) =>
    S #=< K,
    constr_count(Prices,Vs,T,V,K).
