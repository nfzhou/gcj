
import planner.

main =>
    Facts = $[board_size(4),pos(2,1), pos(1,2), pos(4,2), pos(1,3)],
    fqueens(Facts).

main([File]) =>
    Facts = read_file_terms(File),
    fqueens(Facts).

fqueens(Facts) =>
    cl_facts(Facts),
    find_all((R,C),pos(R,C)).sort() = Config,
    best_plan(Config,Plan,Cost),
    printf("moves(%w). ",Cost).
%    println(Plan).

final(Config) =>
    not_attack(Config).

not_attack([_]) => true.
not_attack([(R,C)|L]) =>
    not_attack(R,C,L),
    not_attack(L).

not_attack(_R,_C,[]) => true.
not_attack(R,C,[(R1,C1)|L]) =>
    R !== R1,
    C !== C1,
    R - C != R1 - C1,
    R+C !== R1+C1,
    not_attack(R,C,L).

action(Config,NConfig,Action,Cost) =>
    Cost = 1,
    Action = $move(R,C,R1,C1),
    board_size(N),
    select((R,C),Config,ConfigR),
    move(N,R,C,R1,C1,ConfigR),
    NConfig = insert_ordered(ConfigR,(R1,C1)).

move(N,R,C,R1,C1,Qs) ?=>
    C1 = C,
    between(1,N,R1),
    R1 !== R,
    not (between(min(R1,R),max(R1,R),R2), member((R2,C),Qs)).
move(N,R,C,R1,C1,Qs) ?=>
    R1 = R,
    between(1,N,C1),
    C1 !== C,
    not (between(min(C1,C),max(C1,C),C2), member((R,C2),Qs)).
move(N,R,C,R1,C1,Qs) ?=>
    K = R-C,
    between(1,N,R1),
    C1 = R1-K,
    between(1,N,C1),
    (R,C) != (R1,C1),
    not (between(min(R1,R),max(R1,R),R2), C2 = R2-K, member((R2,C2),Qs)).
move(N,R,C,R1,C1,Qs) =>
    K = R+C,
    between(1,N,R1),
    C1 = K-R1,
    between(1,N,C1),
    (R,C) != (R1,C1),
    not (between(min(R1,R),max(R1,R),R2), C2=K-R2, member((R2,C2),Qs)).
