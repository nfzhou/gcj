import cp.

main =>
    Facts = $[r(2),
              s(2),
              l(0),
              t(0)],
    packing(Facts).              

main([File]) =>
    Facts = read_file_terms(File),
    packing(Facts).

packing(Facts) =>
    Board = new_array(4,4),
    pack_board(Facts,Board).

pack_board(Ps,Board),
    pack_ps(Ps,Board)
=>
    printf("yes.\n").
pack_board(_Ps,_Board) =>
    printf("no.\n").    

pack_ps([],_Board) => true.
pack_ps([P|Ps],Board) =>
    pack_p(P,Board),
    pack_ps(Ps,Board).

pack_p(P,_Board),P[1]==0 => true.
pack_p(r(N),Board) =>
    place_r(Board),
    N1 = N-1,
    pack_p($r(N1),Board).
pack_p(l(N),Board) =>
    place_l(Board),
    N1 = N-1,
    pack_p($l(N1),Board).
pack_p(s(N),Board) =>
    place_s(Board),
    N1 = N-1,
    pack_p($s(N1),Board).
pack_p(t(N),Board) =>
    place_t(Board),
    N1 = N-1,
    pack_p($t(N1),Board).

place_r(Board) ?=>
    Cells = [(R,C1),(R,C2),(R,C3),(R,C4)],
    available_c(Board,R,C1),
    C2 = C1+1, C3 = C2+1, C4 = C3+1,
    place_cs(Board,Cells).
place_r(Board) =>
    Cells = [(R1,C),(R2,C),(R3,C),(R4,C)],
    available_c(Board,R1,C),
    R2 = R1+1, R3 = R2+1, R4 = R3+1,
    place_cs(Board,Cells).

place_s(Board) =>
    Cells = [(R1,C1),(R1,C2),(R2,C1),(R2,C2)],
    available_c(Board,R1,C1),
    C2 = C1+1, R2 = R1+1,
    place_cs(Board,Cells).

place_l(Board) ?=>
    Cells = [(R1,C1),(R2,C1),(R2,C2),(R2,C3)],
    available_c(Board,R1,C1),
    R2 = R1+1, C2 = C1+1, C3 = C2+1,
    place_cs(Board,Cells).
place_l(Board) ?=>
    Cells = [(R1,C3),(R2,C1),(R2,C2),(R2,C3)],
    available_c(Board,R1,C3),
    R2 = R1+1, C2 = C3-1, C1 = C2-1,
    place_cs(Board,Cells).
place_l(Board) ?=>
    Cells = [(R2,C1),(R1,C1),(R1,C2),(R1,C3)],
    available_c(Board,R2,C1),
    R1 = R2-1, C2 = C1+1, C3 = C2+1,
    place_cs(Board,Cells).
place_l(Board) ?=>
    Cells = [(R2,C3),(R1,C1),(R1,C2),(R1,C3)],
    available_c(Board,R2,C3),
    R1 = R2-1, C2 = C3-1, C1 = C2-1,
    place_cs(Board,Cells).
place_l(Board) ?=>
    Cells = [(R1,C1),(R1,C2),(R2,C2),(R3,C2)],
    available_c(Board,R1,C1),
    R2 = R1+1, R3 = R2+1, C2 = C1+1, 
    place_cs(Board,Cells).
place_l(Board) ?=>
    Cells = [(R1,C2),(R1,C1),(R2,C1),(R3,C1)],
    available_c(Board,R1,C2),
    R2 = R1+1, R3 = R2+1, C1 = C2-1, 
    place_cs(Board,Cells).
place_l(Board) ?=>
    Cells = [(R3,C1),(R1,C2),(R2,C2),(R3,C2)],
    available_c(Board,R3,C1),
    R2 = R3-1, R1 = R2-1, C2 = C1+1, 
    place_cs(Board,Cells).
place_l(Board) =>
    Cells = [(R3,C2),(R1,C1),(R2,C1),(R3,C1)],
    available_c(Board,R3,C2),
    R2 = R3-1, R1 = R2-1, C1 = C2-1, 
    place_cs(Board,Cells).

place_t(Board) ?=>
    Cells = [(R1,C2),(R2,C1),(R2,C2),(R2,C3)],
    available_c(Board,R1,C2),
    R2 = R1+1, C1 = C2-1, C3 = C2+1,
    place_cs(Board,Cells).
place_t(Board) ?=>
    Cells = [(R2,C2),(R1,C1),(R1,C2),(R1,C3)],
    available_c(Board,R2,C2),
    R1 = R2-1, C1 = C2-1, C3 = C2+1,
    place_cs(Board,Cells).
place_t(Board) ?=>
    Cells = [(R2,C2),(R1,C1),(R2,C1),(R3,C1)],
    available_c(Board,R2,C2),
    R1 = R2-1, R3 = R2+1, C1 = C2-1,
    place_cs(Board,Cells).
place_t(Board) =>
    Cells = [(R2,C1),(R1,C2),(R2,C2),(R3,C2)],
    available_c(Board,R2,C1),
    R1 = R2-1, R3 = R2+1, C2 = C1+1,
    place_cs(Board,Cells).

place_cs(Board,Cells) =>
    foreach((R,C) in Cells)
        available_c(Board,R,C),
        Board[R,C] = 1
    end.

available_c(Board,R,C) =>
    R #>= 1, R #=< 4,
    C #>= 1, C #=< 4,
    nth(R,Board,Row),
    nth(C,Row,Cell),
    var(Cell).

    
    

    
